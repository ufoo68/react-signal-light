{"version":3,"sources":["assets/on.png","assets/off.png","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","liff","window","liffCheckAvailablityAndDo","callbackIfAvailable","bluetooth","getAvailability","then","isAvailable","setTimeout","catch","alert","liffRequestDevice","requestDevice","device","liffConnectToDevice","gatt","connect","getPrimaryService","process","service","liffGetUserService","getCharacteristic","characteristic","writeValue","Buffer","from","sendValue","value","initSuccess","App","useState","lightValue","setLightValue","lightOn","setLightOn","setInitSuccess","useEffect","init","liffId","initPlugins","initBle","className","src","imgOn","imgOff","alt","Slider","defaultValue","min","max","onChange","_","toString","Switch","onClick","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kHAAAA,EAAOC,QAAU,IAA0B,gC,mBCA3CD,EAAOC,QAAU,IAA0B,iC,4OCSrCC,EAAOC,OAAOD,KAgBdE,EAA4B,SAA5BA,EAA6BC,GACjCH,EAAKI,UAAUC,kBAAkBC,MAAK,SAAAC,GAChCA,EACFJ,IAEAK,YAAW,kBAAMN,EAA0BC,KAAsB,QAElEM,OAAM,kBAAMC,MAAM,qBAGjBC,EAAoB,WACxBX,EAAKI,UAAUQ,gBAAgBN,MAAK,SAAAO,GAClCC,EAAoBD,MACnBJ,OAAM,kBAAMC,MAAM,mBAGjBI,EAAsB,SAACD,GAC3BA,EAAOE,KAAMC,UAAUV,MAAK,WAC1BO,EAAOE,KAAME,kBAAkBC,wCAAmDZ,MAAK,SAAAa,GACrFC,EAAmBD,MAClBV,OAAM,kBAAMC,MAAM,0BACpBD,OAAM,kBAAMC,MAAM,oBAGjBU,EAAqB,SAACD,GAE1BA,EAAQE,kBADoB,wCACmBf,MAAK,SAAAgB,GAClDrB,OAAOqB,eAAiBA,EACxBA,EAAeC,WAAWC,SAAOC,KAAK,MACnChB,OAAM,kBAAMC,MAAM,yBACpBD,OAAM,kBAAMC,MAAM,+BAGjBgB,EAAY,SAACC,EAAeC,GAC5BA,GAAa3B,OAAOqB,eAAeC,WAAWC,SAAOC,KAAKE,IAC3DlB,OAAM,kBAAMC,MAAM,kBAqCRmB,EAlCC,WAAO,IAAD,EACgBC,mBAAiB,OADjC,mBACbC,EADa,KACDC,EADC,OAEUF,oBAAkB,GAF5B,mBAEbG,EAFa,KAEJC,EAFI,OAGkBJ,oBAAkB,GAHpC,mBAGbF,EAHa,KAGAO,EAHA,KASpB,OAJAC,qBAAU,YArDI,SAACD,GACfnC,EAAKqC,KAAK,CAAEC,OAAQpB,wBAA2CZ,MAAK,WAClEN,EAAKuC,YAAY,CAAC,cAAcjC,MAAK,WACnCJ,GAA0B,kBAAMS,OAChCwB,GAAe,MAEf1B,OAAM,kBAAMC,MAAM,mBAgDpB8B,CAAQL,KACP,IAGD,yBAAKM,UAAU,OACb,yBAAKA,UAAU,SACb,yBAAKC,IAAKT,EAAUU,IAAQC,IAAQC,IAAI,kBAE1C,yBAAKJ,UAAU,cACZV,GAEH,yBAAKU,UAAU,UACb,kBAACK,EAAA,EAAD,CAAQC,aAAc,IAAKC,IAAK,IAAKC,IAAK,KAAMR,UAAU,YAAYS,SAAU,SAACC,EAAGxB,GAClFK,EAAcL,EAAMyB,gBAGxB,yBAAKX,UAAU,UACb,qCACA,kBAACY,EAAA,EAAD,CAAQC,QAAS,WACfpB,GAAYD,GACoCP,EAA/CO,EAAyD,IAArCF,EAA0CH,MAEjE,uCC/EY2B,QACW,cAA7BtD,OAAOuD,SAASC,UAEe,UAA7BxD,OAAOuD,SAASC,UAEhBxD,OAAOuD,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3D,MAAK,SAAA4D,GACjCA,EAAaC,kB","file":"static/js/main.37b05282.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/on.375c4f70.png\";","module.exports = __webpack_public_path__ + \"static/media/off.afeb9266.png\";","import React, { FC, useState, useEffect } from 'react';\nimport { Buffer } from 'buffer'\nimport './App.scss';\nimport imgOn from './assets/on.png'\nimport imgOff from './assets/off.png'\nimport { BluetoothDevice, BluetoothRemoteGATTService, BluetoothRemoteGATTCharacteristic } from 'liff-type';\nimport { Slider } from '@material-ui/core';\nimport Switch from '@material-ui/core/Switch';\n\nconst liff = window.liff\n\ndeclare global {\n  interface Window { characteristic: BluetoothRemoteGATTCharacteristic; }\n}\n\nconst initBle = (setInitSuccess: (flag: boolean) => void) => {\n  liff.init({ liffId: process.env.REACT_APP_LIFF_ID as string }).then(() => {\n    liff.initPlugins(['bluetooth']).then(() => {\n      liffCheckAvailablityAndDo(() => liffRequestDevice())\n      setInitSuccess(true)\n    }\n    ).catch(() => alert('init fail'))\n  })\n}\n\nconst liffCheckAvailablityAndDo = (callbackIfAvailable: () => void) => {\n  liff.bluetooth.getAvailability().then(isAvailable => {\n    if (isAvailable) {\n      callbackIfAvailable()\n    } else {\n      setTimeout(() => liffCheckAvailablityAndDo(callbackIfAvailable), 10000)\n    }\n  }).catch(() => alert('avaiable fail'))\n}\n\nconst liffRequestDevice = () => {\n  liff.bluetooth.requestDevice().then(device => {\n    liffConnectToDevice(device)\n  }).catch(() => alert('rquest fail'))\n}\n\nconst liffConnectToDevice = (device: BluetoothDevice) => {\n  device.gatt!.connect().then(() => {\n    device.gatt!.getPrimaryService(process.env.REACT_APP_USER_SERVICE_UUID as string).then(service => {\n      liffGetUserService(service);\n    }).catch(() => alert('get service fail'))\n  }).catch(() => alert('connect fail'))\n}\n\nconst liffGetUserService = (service: BluetoothRemoteGATTService) => {\n  const CHARACTERISTIC_UUID = 'E9062E71-9E62-4BC6-B0D3-35CDCD9B027B';\n  service.getCharacteristic(CHARACTERISTIC_UUID).then(characteristic => {\n    window.characteristic = characteristic\n    characteristic.writeValue(Buffer.from('0'))\n      .catch(() => alert('init write fail'))\n  }).catch(() => alert('get characteristic fail'))\n}\n\nconst sendValue = (value: string, initSuccess: boolean) => {\n  if (initSuccess) window.characteristic.writeValue(Buffer.from(value))\n    .catch(() => alert('write fail'))\n}\n\nconst App: FC = () => {\n  const [lightValue, setLightValue] = useState<string>('512')\n  const [lightOn, setLightOn] = useState<boolean>(false)\n  const [initSuccess, setInitSuccess] = useState<boolean>(false)\n\n  useEffect(() => {\n    initBle(setInitSuccess)\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <div className=\"light\">\n        <img src={lightOn ? imgOn : imgOff} alt=\"signal-light\" />\n      </div>\n      <div className=\"lightValue\">\n        {lightValue}\n      </div>\n      <div className=\"slider\">\n        <Slider defaultValue={512} min={200} max={1023} className=\"sliderBar\" onChange={(_, value) => {\n          setLightValue(value.toString())\n        }} />\n      </div>\n      <div className=\"switch\">\n        <span>Off</span>\n        <Switch onClick={() => {\n          setLightOn(!lightOn)\n          !lightOn ? sendValue(lightValue, initSuccess) : sendValue('0', initSuccess)\n        }} />\n        <span>On</span>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}